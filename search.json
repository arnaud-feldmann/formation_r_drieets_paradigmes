[
  {
    "objectID": "fonctions.html",
    "href": "fonctions.html",
    "title": "Rappel sur les fonctions en R",
    "section": "",
    "text": "En R, on définit une fonction de cette manière :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLa fonction super_calcul a plusieurs paramètres : a, b et multiplication. On donne à ces paramètres des valeurs qu’on appelle arguments. Toutefois, dans le langage courant, et peut-être dans cette formation si je ne fais pas trop attention, on utilise parfois indistinctement les deux mots.\nOn remarque que le paramètre multiplication a un argument par défaut. Si on omet de lui donner une valeur, sa valeur par défaut sera TRUE.\nOn remarque aussi que, lorsque l’on fait des appels de fonctions, l’on peut choisir d’utiliser explicitement les noms des différents paramètres. Si on utilise les noms explicites, il est possible de les renseigner dans le désordre.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLe code ci-dessus renvoie une erreur. En effet, si un paramètre n’a pas de valeur par défaut, une valeur doit obligatoirement être assignée lors de l’appel de fonction.\n\n\n\n\n\n\nNote\n\n\n\nLa dernière remarque n’est pas complètement vraie. Du vieux code persiste dans R, renseignant des arguments par défaut dans le code même de la fonction, à l’aide de if (missing(argument)) {}. Ceci est toutefois, en général, considéré comme une mauvaise pratique.\n\n\nOn vient de constater de manière implicite un aspect de R : par défaut, la valeur retournée par une fonction est la dernière valeur évaluée lors de son exécution (qui dépend éventuellement de structures telles que if () else {}). Une manière explicite de renvoyer une valeur de retour est d’invoquer return(). Appeler return() met fin à l’exécution de la fonction. Tout ce qui vient après n’est jamais rappelé.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ncalcula() renvoie 2L, tandis que calculb() renvoie 3L. On aurait pu également constater que, dans calcula, si on remplace 3L par stop(), le stop n’empêche pas la fonction de retourner convenablement. En effet, il arrive après le return.",
    "crumbs": [
      "Rappel sur les fonctions en R"
    ]
  },
  {
    "objectID": "fonctions.html#définition-de-fonction",
    "href": "fonctions.html#définition-de-fonction",
    "title": "Rappel sur les fonctions en R",
    "section": "",
    "text": "En R, on définit une fonction de cette manière :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLa fonction super_calcul a plusieurs paramètres : a, b et multiplication. On donne à ces paramètres des valeurs qu’on appelle arguments. Toutefois, dans le langage courant, et peut-être dans cette formation si je ne fais pas trop attention, on utilise parfois indistinctement les deux mots.\nOn remarque que le paramètre multiplication a un argument par défaut. Si on omet de lui donner une valeur, sa valeur par défaut sera TRUE.\nOn remarque aussi que, lorsque l’on fait des appels de fonctions, l’on peut choisir d’utiliser explicitement les noms des différents paramètres. Si on utilise les noms explicites, il est possible de les renseigner dans le désordre.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLe code ci-dessus renvoie une erreur. En effet, si un paramètre n’a pas de valeur par défaut, une valeur doit obligatoirement être assignée lors de l’appel de fonction.\n\n\n\n\n\n\nNote\n\n\n\nLa dernière remarque n’est pas complètement vraie. Du vieux code persiste dans R, renseignant des arguments par défaut dans le code même de la fonction, à l’aide de if (missing(argument)) {}. Ceci est toutefois, en général, considéré comme une mauvaise pratique.\n\n\nOn vient de constater de manière implicite un aspect de R : par défaut, la valeur retournée par une fonction est la dernière valeur évaluée lors de son exécution (qui dépend éventuellement de structures telles que if () else {}). Une manière explicite de renvoyer une valeur de retour est d’invoquer return(). Appeler return() met fin à l’exécution de la fonction. Tout ce qui vient après n’est jamais rappelé.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ncalcula() renvoie 2L, tandis que calculb() renvoie 3L. On aurait pu également constater que, dans calcula, si on remplace 3L par stop(), le stop n’empêche pas la fonction de retourner convenablement. En effet, il arrive après le return.",
    "crumbs": [
      "Rappel sur les fonctions en R"
    ]
  },
  {
    "objectID": "fonctions.html#dots",
    "href": "fonctions.html#dots",
    "title": "Rappel sur les fonctions en R",
    "section": "Dots",
    "text": "Dots\nLorsque le nombre de paramètres d’une fonction peut être variable, on peut utiliser les ... qu’on appelle “dots”. list(...) permet de retrouver ces arguments sous forme de liste dans le corps de la fonction.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDans le code précédent, on a pu faire une fonction de somme sans figer à l’avance le nombre de termes de la somme.\n\n\n\n\n\n\nNote\n\n\n\nOn a utilisé dans super_somme une fonction particulière, Reduce, qui est typique des langages fonctionnels. L’idée est ici que l’on calcule 2 + 3 + 7 + 1. On verra plus en détail ce type d’opérations dans la partie dédiée au paradigme fonctionnel.\nDans le cas présent, sum existe déjà et peut déjà s’appliquer à un vecteur. On n’a écrit super_somme qu’à fin d’illustration.",
    "crumbs": [
      "Rappel sur les fonctions en R"
    ]
  },
  {
    "objectID": "fonctions.html#appeler-une-fonction-dots-sur-une-liste",
    "href": "fonctions.html#appeler-une-fonction-dots-sur-une-liste",
    "title": "Rappel sur les fonctions en R",
    "section": "Appeler une fonction dots sur une liste",
    "text": "Appeler une fonction dots sur une liste\nImaginons que l’on veuille appeler une fonction ... sur une liste. On souhaite que chaque élément de la liste devienne un argument. On peut par exemple faire, sur notre fonction super_somme.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNote\n\n\n\nLa fonction do.call est en réalité plus générale que cela. Elle permet également d’utiliser des arguments nommés, comme on peut le voir dans l’exemple suivant :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Rappel sur les fonctions en R"
    ]
  },
  {
    "objectID": "fonctions.html#fonction-récursives",
    "href": "fonctions.html#fonction-récursives",
    "title": "Rappel sur les fonctions en R",
    "section": "Fonction récursives",
    "text": "Fonction récursives\nLes fonctions en R peuvent tout-à-fait être récursives. Par exemple, même si factorial() existe déjà dans R, on pourrait très bien la redéfinir via :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nR permet également une petite astuce pour éviter d’avoir à utiliser le nom d’une fonction dans son propre corps (cela permet de pouvoir renommer la fonction à un seul endroit). Le code précédent est équivalent à :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nRemarque optionnelle\n\n\n\nDepuis la dernière version de R (pas avant !), on peut utiliser la fonction Tailcall pour faire des récursivités terminales ; qui sont moins pratiques à lire mais plus efficaces. L’interface n’est pas encore figée mais cela ressemble aujourd’hui à cela.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Rappel sur les fonctions en R"
    ]
  },
  {
    "objectID": "fonctions.html#exercices",
    "href": "fonctions.html#exercices",
    "title": "Rappel sur les fonctions en R",
    "section": "Exercices",
    "text": "Exercices\nQuestion 1\nRéécrire la fonction super_somme en utilisant une syntaxe récursive. On pourra, par exemple, s’aider de la fonction head, qui permet de retourner une sous-liste contenant les n premiers éléments d’une liste.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nProposition de solution\n\n\n\n\n\n\nsuper_somme &lt;- function(...) {\n  dots &lt;- list(...)\n  longueur &lt;- length(dots)\n  if (longueur == 0L) 0\n  else dots[[longueur]] + do.call(super_somme, head(dots, longueur - 1L))\n}\nprint(super_somme(2, 3, 7, 1))\n\n[1] 13\n\n\n\n\n\n\n\n\nRemarque\n\n\n\n\nLa récursivité est ici très bourrine ! On le fait juste pour l’exercice.\nQuelques petites astuces permettent, si besoin, d’éviter de convertir tous les arguments d’une fonction dots en liste. On dispose par exemple de ...length() en tant que substitut pour length(list(...)).\n\n\n\n\n\n\nQuestion 2\nEcrire une fonction ... super_produit qui calcule le produit de tous les arguments, et l’utiliser pour écrire une nouvelle version de la fonction fact.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nProposition de solution\n\n\n\n\n\n\nsuper_produit &lt;- function(...) {\n  dots &lt;- list(...)\n  Reduce(`*`, dots)\n}\nfact &lt;- function(n) {\n  do.call(super_produit, as.list(1L:n))\n}\nfact(10)\n\n[1] 3628800\n\n\n\n\n\nQuestion 3\nEcrire une fonction dots usine_a_gaz qui renvoie :\n\nNULL s’il n’y a aucun argument.\nLe nombre d’arguments s’il y en a deux ou plus.\n\"bonjour\" si on lui soumet en unique argument un vecteur de type character.\nLa somme du vecteur si on lui soumet en unique argument un vecteur numérique au sens de is.numeric.\n\"échec\" dans tous les autres cas.\n\nOn pourra éventuellement s’aider des petites astuces, dont ...length(), lisibles dans la page d’aide des .... Celle-ci est accessible en tapant ?dots.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nProposition de solution\n\n\n\n\n\n\nusine_a_gaz &lt;- function(...) {\n  longueur &lt;- ...length()\n  if (longueur == 0) NULL\n  else if (longueur &gt;= 2L) longueur\n  else if (is.character(..1)) \"bonjour\"\n  else if (is.numeric(..1)) sum(..1)\n  else \"échec\"\n}\nprint(usine_a_gaz())\n\nNULL\n\nprint(usine_a_gaz(1,3))\n\n[1] 2\n\nprint(usine_a_gaz(c(\"a\",\"b\")))\n\n[1] \"bonjour\"\n\nprint(usine_a_gaz(c(1, 2)))\n\n[1] 3\n\nprint(usine_a_gaz(c(1L, 2L)))\n\n[1] 3\n\nprint(usine_a_gaz(list()))\n\n[1] \"échec\"\n\n\nOn peut également utiliser des return(), auquel cas les else deviennent inutiles puisque return fait directement retourner la fonction.\n\nusine_a_gaz &lt;- function(...) {\n  longueur &lt;- ...length()\n  if (longueur == 0) return(NULL)\n  if (longueur &gt;= 2L) return(longueur)\n  if (is.character(..1)) return(\"bonjour\")\n  if (is.numeric(..1)) return(sum(..1))\n  \"échec\"\n}\nprint(usine_a_gaz())\n\nNULL\n\nprint(usine_a_gaz(1,3))\n\n[1] 2\n\nprint(usine_a_gaz(c(\"a\",\"b\")))\n\n[1] \"bonjour\"\n\nprint(usine_a_gaz(c(1, 2)))\n\n[1] 3\n\nprint(usine_a_gaz(c(1L, 2L)))\n\n[1] 3\n\nprint(usine_a_gaz(list()))\n\n[1] \"échec\"",
    "crumbs": [
      "Rappel sur les fonctions en R"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_2.html",
    "href": "fonctions_ordre_superieur_2.html",
    "title": "Fonctions d’ordre supérieur (retours)",
    "section": "",
    "text": "Que se passe-t-il par exemple quand j’exécute ce code R ? On y appelle une fonction qui renvoie elle-même une fonction. Il y a plein de choses qui s’appellent x ! Comment cela peut bien se résoudre ?\n\n\n\n\n\n\nNote\n\n\n\nOn l’a vu dans la partie précédente, ces fonctions retournant des fonctions sont un des deux types de fonction d’ordre supérieur.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOn se rend compte de quatre choses :\n\nAucune des assignations (&lt;-) internes aux fonctions n’a modifié l’environnement global ; print(x) affiche toujours 1L.\nLe arg de la fonction mystère semble avoir été passé\nLe résultat du x retourné par fun_1() est celui défini à l’intérieur de la fonction anonyme, à savoir 3L.\nLe résultat du x retourné par fun_2() est celui défini à l’intérieur de la fonction anonyme, à savoir 4L.\n\nPourquoi donc ?\n\nDans R, les objets sont contenus dans des environnements. Les environnements sont plus ou moins des petites bulles :\n\ndans lesquelles on peut assigner des objets (avec&lt;-) de manière totalement isolée les unes des autres. Ici il faut bien comprendre que tous les objets x existent en même temps dans des environnements différents.\nà l’exception de l’emptyenv, tous les environnements indiquent un environnement parent.\nChaque appel de fonction (et non chaque définition) définit un environnement. Ici on crée donc deux environnements différents pour mystere qu’on appelle des instances.\nlorsque l’on recherche un objet dans un environnement et qu’il n’y existe pas, on va chercher dans l’environnement parent (puis à nouveau l’environnement parent si on ne trouve toujours pas et ainsi de suite). Ici, par exemple, fun_1 n’a pas connaissance de arg. Alors on cherche dans l’environnement au dessus. Surprise ! On y trouve arg et l’on peut donc assigner avec cette valeur. C’est ce qui explique que fun_1() et fun_2() peuvent renvoyer des résultats différents.\n\nDans la suite, on s’attardera surtout sur la partie bleue du graphique ci-dessus. La partie orange a été abordée à titre d’information, mais n’est pas vraiment le sujet ici. De notre point de vue, l’environnement le plus bas est donc le globalenv.",
    "crumbs": [
      "Fonctions d'ordre supérieur 2 (retours)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_2.html#les-environnements",
    "href": "fonctions_ordre_superieur_2.html#les-environnements",
    "title": "Fonctions d’ordre supérieur (retours)",
    "section": "",
    "text": "Que se passe-t-il par exemple quand j’exécute ce code R ? On y appelle une fonction qui renvoie elle-même une fonction. Il y a plein de choses qui s’appellent x ! Comment cela peut bien se résoudre ?\n\n\n\n\n\n\nNote\n\n\n\nOn l’a vu dans la partie précédente, ces fonctions retournant des fonctions sont un des deux types de fonction d’ordre supérieur.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOn se rend compte de quatre choses :\n\nAucune des assignations (&lt;-) internes aux fonctions n’a modifié l’environnement global ; print(x) affiche toujours 1L.\nLe arg de la fonction mystère semble avoir été passé\nLe résultat du x retourné par fun_1() est celui défini à l’intérieur de la fonction anonyme, à savoir 3L.\nLe résultat du x retourné par fun_2() est celui défini à l’intérieur de la fonction anonyme, à savoir 4L.\n\nPourquoi donc ?\n\nDans R, les objets sont contenus dans des environnements. Les environnements sont plus ou moins des petites bulles :\n\ndans lesquelles on peut assigner des objets (avec&lt;-) de manière totalement isolée les unes des autres. Ici il faut bien comprendre que tous les objets x existent en même temps dans des environnements différents.\nà l’exception de l’emptyenv, tous les environnements indiquent un environnement parent.\nChaque appel de fonction (et non chaque définition) définit un environnement. Ici on crée donc deux environnements différents pour mystere qu’on appelle des instances.\nlorsque l’on recherche un objet dans un environnement et qu’il n’y existe pas, on va chercher dans l’environnement parent (puis à nouveau l’environnement parent si on ne trouve toujours pas et ainsi de suite). Ici, par exemple, fun_1 n’a pas connaissance de arg. Alors on cherche dans l’environnement au dessus. Surprise ! On y trouve arg et l’on peut donc assigner avec cette valeur. C’est ce qui explique que fun_1() et fun_2() peuvent renvoyer des résultats différents.\n\nDans la suite, on s’attardera surtout sur la partie bleue du graphique ci-dessus. La partie orange a été abordée à titre d’information, mais n’est pas vraiment le sujet ici. De notre point de vue, l’environnement le plus bas est donc le globalenv.",
    "crumbs": [
      "Fonctions d'ordre supérieur 2 (retours)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_2.html#lassignation-remontante--",
    "href": "fonctions_ordre_superieur_2.html#lassignation-remontante--",
    "title": "Fonctions d’ordre supérieur (retours)",
    "section": "L’assignation remontante (<<-)",
    "text": "L’assignation remontante (&lt;&lt;-)\nOn remplace les deux assignations intra-fonctionnelles par un nouvel opérateur, l’assignation remontante &lt;&lt;-.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOn observe que le x global est cette fois-ci modifié par l’assignation remontante. En effet, cet opérateur remonte les différents environnements parents jusqu’à trouver un x déjà existant et le modifie.\nIci, à chaque affectation, on remonte donc jusqu’à l’environnement global et on trouve x. On modifie alors celui-ci.\n\nÀ la fin de l’exécution, on a donc le schéma ci-dessus. On n’a pas créé de version locale de x.\n\n\n\n\n\n\nNe pas assigner le global\n\n\n\nAttention cependant, quand bien même l’opérateur &lt;&lt;- peut théoriquement créer des fonctions manipulant l’environnement global comme on vient de le voir, ce n’est pas une bonne pratique. L’utilisation de &lt;&lt;- doit être fait de manière circonscrite à des cas que l’on va aborder dans la suite de cette page, mais modifier l’environnement global est une (très) mauvaise pratique. En effet, cela rompt complètement le paradigme fonctionnel dès lors que l’on a des états globaux pouvant mener à des interdépendances, des problèmes d’isolation…\n\n\n\n\n\n\n\n\nNote\n\n\n\nPar défaut, si la remontée des environnements ne donne rien, l’assignation remontante assignera dans l’environnement global.\n\n\nQue se passe-t-il si on n’utilise l’assignation remontante que dans la fonction anonyme et plus pour le x &lt;- 2L de la fonction de second ordre ? Pourquoi ?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nRéponse\n\n\n\n\n\n\nx &lt;- 1L\nmystere &lt;-\n  function(arg) {\n    x &lt;- 2L\n    function() {\n      x &lt;&lt;- arg\n      return(x)\n    }\n  }\n\nfun_1 &lt;- mystere(3L)\nfun_2 &lt;- mystere(4L)\nprint(x)\n\n[1] 1\n\nprint(fun_1())\n\n[1] 3\n\nprint(x)\n\n[1] 1\n\nprint(fun_2())\n\n[1] 4\n\nprint(x)\n\n[1] 1\n\n\nEn apparence, les fonctions semblent se comporter à nouveau comme si on utilisait l’assignation locale. Mais, en réalité, le comportement par environnements est différent.\n\nÀ la fin de l’exécution on a le graphe ci-dessus. Les x &lt;- 2L des différentes instances de mystère ont été ecrasés respectivement par les x &lt;&lt;- 3L et x &lt;&lt;- 4L de fun_1 fun_2. Ici, comme on n’utilise de toutes manières pas les valeur 2L, ce n’est pas très grave. On préserve l’isolation entre instances donc tout va bien ; même si ici la notation est inutile.",
    "crumbs": [
      "Fonctions d'ordre supérieur 2 (retours)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_2.html#closures",
    "href": "fonctions_ordre_superieur_2.html#closures",
    "title": "Fonctions d’ordre supérieur (retours)",
    "section": "Closures",
    "text": "Closures\nOn a vu plus que des fonctions peuvent retourner des fonctions, et qu’il s’agit d’un des deux types de fonctions d’ordre supérieur. Dans R, on appelle aussi ces fonctions des closures (fermetures en français, mais le terme n’est pas très employé).\nCe nom illustre un aspect de ces fonctions d’ordre supérieur, et une utilisation particulière. On a vu qu’il est possible d’écrire dans l’environnement parent tout en préservant l’isolation entre instances. Et bien utilisons cette propriété !\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nMais que se passe-t-il ? C’est très étonnant ! Il semble que l’on ait défini des états ; et pourtant il n’y a aucune variable n dans l’environnement global !\n\nEn fait, on appelle ces fonctions des closures parce qu’elles “enferment” leur environnement parent. Elle permettent de maintenir un espace isolé où l’on peut tout-à-fait faire des modifications.\nCette astuce est puissante et permet de maintenir des états à l’intérieur d’un langage fonctionnel. Cela rompt l’axiome maximaliste d’un langage fonctionnel idéal qui ne contiendrait que des fonctions complètement pures, mais cela rompt cette approche de manière maitrisée, la plus locale possible. On doit bien sûr n’user de cette astuce qu’avec parcimonie, quand cela semble nécessaire.",
    "crumbs": [
      "Fonctions d'ordre supérieur 2 (retours)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_2.html#closures-complexes",
    "href": "fonctions_ordre_superieur_2.html#closures-complexes",
    "title": "Fonctions d’ordre supérieur (retours)",
    "section": "Closures complexes",
    "text": "Closures complexes\nUne closure peut renvoyer plusieurs fonctions différentes par exemple dans une liste. On s’approche alors beaucoup de la définition d’un objet en Programmation Orientée Objet. En effet, chaque instance de fonctions a des états, et différentes méthodes qui permettent de modifier ces états.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIci, les deux appels de nouvelle_resolution() permettent de définir deux espaces différents. Dans chacun de ces environnements, les fonctions setX(), setY(), getX() et getY() agiront, comme on le voit dans le schéma ci-dessous.",
    "crumbs": [
      "Fonctions d'ordre supérieur 2 (retours)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_2.html#quizz",
    "href": "fonctions_ordre_superieur_2.html#quizz",
    "title": "Fonctions d’ordre supérieur (retours)",
    "section": "Quizz",
    "text": "Quizz\n\nQuestion 1\n\nC’est lors de la définition de la fonction que l’on détermine son environnement.\n\n\n\n\n ✗Vrai\n\n\n ✓Faux\n\n\nEffacer la réponse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nC’est lors de l’appel d’une fonction que l’on détermine un environnement.\n\n\n\n\n\nQuestion 2\n\nDans le code ci-dessous :\n\nx &lt;- 4\nfonction &lt;-\n  function(val) {\n    x &lt;- val\n    return(x)\n  }\nfonction(3)\n\nLe x dans l’environnement global est effacé de manière irrémédiable.\n\n\n\n\n ✗Vrai\n\n\n ✓Faux\n\n\nEffacer la réponse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nNon, l’assignation simple affecte des valeurs dans l’environnement créé lors de l’appel d’une fonction et il n’y a strictement aucun danger de conflit.\n\n\n\n\n\nQuestion 3\n\nDans le code ci-dessous :\n\nx &lt;- 4\nfonction &lt;-\n  function(val) {\n    x &lt;&lt;- val\n    return(x)\n  }\nfonction(3)\n\nLe x dans l’environnement global est effacé de manière irrémédiable.\n\n\n\n\n ✓Vrai\n\n\n ✗Faux\n\n\nEffacer la réponse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nVrai, l’assignation remontante &lt;&lt;- remonte les environnements parents jusqu’à retrouver un objet de même nom. Ici, elle va donc modifier le x de l’environnement global.\n\n\n\n\n\nQuestion 4\n\nDans le code ci-dessous :\n\nx &lt;- 4\nfonction &lt;-\n  function(val) {\n    x &lt;- 0\n    x &lt;&lt;- val\n    return(x)\n  }\nfonction(3)\n\nLe x dans l’environnement global est effacé de manière irrémédiable.\n\n\n\n\n ✓Vrai\n\n\n ✗Faux\n\n\nEffacer la réponse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nVrai, l’assignation remontante &lt;&lt;- remonte les environnements parents jusqu’à retrouver un objet de même nom. Ici, elle va donc modifier le x de l’environnement global.\n\n\n\n\n\nQuestion 5\n\nDans le code ci-dessous :\n\nx &lt;- 4\nfonction &lt;- function() {\n  x &lt;- 0\n  function(val) {\n    x &lt;&lt;- val\n    return(x)\n  }\n}\n\nfonction()(3)\n\nLe x dans l’environnement global est effacé de manière irrémédiable.\n\n\n\n\n ✗Vrai\n\n\n ✓Faux\n\n\nEffacer la réponse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nFaux, l’assignation remontante &lt;&lt;- remonte les environnements parents jusqu’à retrouver un objet de même nom. Ici, le premier environnement parent est celui instancié par fonction. Et il s’avère qu’il contient un objet de nom x. Donc le x de l’environnement global n’est pas écrasé.\n\n\n\n\n\nQuestion 6\n\nDans le code ci-dessous :\n\nx &lt;- 4\nfonction &lt;- function() {\n  function(val) {\n    x &lt;&lt;- val\n    return(x)\n  }\n}\n\nfonction()(3)\n\nLe x dans l’environnement global est effacé de manière irrémédiable.\n\n\n\n\n ✓Vrai\n\n\n ✗Faux\n\n\nEffacer la réponse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nVrai, l’assignation remontante &lt;&lt;- remonte les environnements parents jusqu’à retrouver un objet de même nom. Ici, le premier environnement parent est celui instancié par fonction. Mais il ne contient aucun objet de nom x. On remonte donc encore les environnements jusqu’à l’environnement global, et donc le x global est modifié.",
    "crumbs": [
      "Fonctions d'ordre supérieur 2 (retours)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_2.html#exercice",
    "href": "fonctions_ordre_superieur_2.html#exercice",
    "title": "Fonctions d’ordre supérieur (retours)",
    "section": "Exercice",
    "text": "Exercice\nSupposons que l’on ait une fonction qui mette longtemps à répondre, par exemple :\n\ncalcul_de_dingue &lt;- function(arg) {\n  Sys.sleep(3L) # Une attente de 3 secondes pour simuler un long calcul.\n  return(2 * arg)\n}\n\nOù arg est un vecteur numérique.\nComment utiliser une closure pour faire une deuxième version de calcul_de_dingue utilisant un cache qui enregistre les résultats de calcul_de_dingue en mémoire et évite de relancer le calcul plusieurs fois ?\n\n\n\n\n\n\nAide (à consulter après s’être un peu creusé la tête)\n\n\n\n\n\n\ncalcul_de_dingue &lt;- function(arg) {\n  Sys.sleep(3L) # Une attente de 3 secondes pour simuler un long calcul.\n  return(2 * arg)\n}\n\ncalcul_de_dingue_cache &lt;- function(taille_cache = 10L) {\n  cache &lt;- vector(\"list\",taille_cache)\n  cache_suivant &lt;- 1L\n  function(arg) {\n    index_en_cache &lt;- which(vapply(cache, \\(x) identical(x$arg,arg), TRUE))[1L]\n    # Cette ligne précédente peut être remplacée par\n    # index_en_cache &lt;- Position(\\(x) identical(x$arg,arg), cache)\n    # Qui fait la même chose (mais on n'a pas vu Position)\n    if (is.na(index_en_cache)) {\n      # Remplir ici\n      # C'est le cas où l'on ne retrouve pas la bonne entrée dans la cache.\n    }\n    else {\n      # Remplir ici \n      # C'est le cas où index_en_cache contient le numéro de cache et donc on\n      # n'a pas à refaire le calcul.\n    }\n  }\n}\n\ncalcul_moins_dingue &lt;- calcul_de_dingue_cache()\ncalcul_moins_dingue(c(1, 3))\ncalcul_moins_dingue(c(1, 3)) # Pas besoin de calcul, déjà en cache\ncalcul_moins_dingue(c(4, 7))\ncalcul_moins_dingue(c(4, 7)) # Pas besoin de calcul, déjà en cache\ncalcul_moins_dingue(c(1, 3)) # Pas besoin de calcul, déjà en cache\ncalcul_moins_dingue(c(4, 7)) # Pas besoin de calcul, déjà en cache\n\n\n\n\n\n\n\n\n\n\nProposition de solution\n\n\n\n\n\n\ncalcul_de_dingue &lt;- function(arg) {\n  Sys.sleep(3L) # Une attente de 3 secondes pour simuler un long calcul.\n  return(2 * arg)\n}\n\ncalcul_de_dingue_cache &lt;- function(taille_cache = 10L) {\n  cache &lt;- vector(\"list\",taille_cache)\n  cache_suivant &lt;- 1L\n  function(arg) {\n    index_en_cache &lt;- which(vapply(cache, \\(x) identical(x$arg,arg), TRUE))[1L]\n    # Cette ligne précédente peut être remplacée par\n    # index_en_cache &lt;- Position(\\(x) identical(x$arg,arg), cache)\n    # Qui fait la même chose (mais on n'a pas vu Position)\n    if (is.na(index_en_cache)) {\n      valeur &lt;- calcul_de_dingue(arg)\n      cache[[cache_suivant]] &lt;&lt;- list(arg = arg,\n                                      valeur = valeur)\n      cache_suivant &lt;&lt;- cache_suivant %% taille_cache + 1L\n      valeur\n    }\n    else cache[[index_en_cache]]$valeur\n  }\n}\n\ncalcul_moins_dingue &lt;- calcul_de_dingue_cache()\ncalcul_moins_dingue(c(1, 3))\n\n[1] 2 6\n\ncalcul_moins_dingue(c(1, 3)) # Pas besoin de calcul, déjà en cache\n\n[1] 2 6\n\ncalcul_moins_dingue(c(4, 7))\n\n[1]  8 14\n\ncalcul_moins_dingue(c(4, 7)) # Pas besoin de calcul, déjà en cache\n\n[1]  8 14\n\ncalcul_moins_dingue(c(1, 3)) # Pas besoin de calcul, déjà en cache\n\n[1] 2 6\n\ncalcul_moins_dingue(c(4, 7)) # Pas besoin de calcul, déjà en cache\n\n[1]  8 14",
    "crumbs": [
      "Fonctions d'ordre supérieur 2 (retours)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_1.html",
    "href": "fonctions_ordre_superieur_1.html",
    "title": "Fonctions d’ordre supérieur 1 (arguments)",
    "section": "",
    "text": "En informatique, la notion de fonction d’ordre supérieur désigne une fonction avec au moins l’une des propriétés suivantes :\n\nElle a pour argument une ou des fonctions\nElles retournent a minima une fonction\n\nLes fonctions d’ordre supérieur sont un élément central permettant l’expressivité des langages fonctionnels.\nDans cette première partie sur les fonctions d’ordre supérieur, nous abordons la thématique des fonctions avec ayant des arguments fonctionnels.",
    "crumbs": [
      "Fonctions d'ordre supérieur 1 (arguments)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_1.html#fonctions-dordre-supérieur",
    "href": "fonctions_ordre_superieur_1.html#fonctions-dordre-supérieur",
    "title": "Fonctions d’ordre supérieur 1 (arguments)",
    "section": "",
    "text": "En informatique, la notion de fonction d’ordre supérieur désigne une fonction avec au moins l’une des propriétés suivantes :\n\nElle a pour argument une ou des fonctions\nElles retournent a minima une fonction\n\nLes fonctions d’ordre supérieur sont un élément central permettant l’expressivité des langages fonctionnels.\nDans cette première partie sur les fonctions d’ordre supérieur, nous abordons la thématique des fonctions avec ayant des arguments fonctionnels.",
    "crumbs": [
      "Fonctions d'ordre supérieur 1 (arguments)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_1.html#manipuler-des-fonctions-avec-des-fonctions",
    "href": "fonctions_ordre_superieur_1.html#manipuler-des-fonctions-avec-des-fonctions",
    "title": "Fonctions d’ordre supérieur 1 (arguments)",
    "section": "Manipuler des fonctions avec des fonctions",
    "text": "Manipuler des fonctions avec des fonctions\nOn a vu dans le point précédent deux fonctions qui s’appliquent sur des fonctions. do.call nous a permis d’appliquer une fonction ... sur une liste, tandis que Reduce nous a permis d’écrire 2 + 3 + 7 + 1 de manière un peu plus jolie qu’à la main.\nOn a vu aussi que R est un langage principalement fonctionnel. En fait, R offre un certain nombre de fonctions permettant d’appliquer des fonctions de différentes manières. Nous verrons ici lapply, vapply, Map, replicate, apply, do.call, Reduce.",
    "crumbs": [
      "Fonctions d'ordre supérieur 1 (arguments)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_1.html#lapply-appliquer-une-fonction-à-chaque-élément-dune-liste-ou-dun-vecteur",
    "href": "fonctions_ordre_superieur_1.html#lapply-appliquer-une-fonction-à-chaque-élément-dune-liste-ou-dun-vecteur",
    "title": "Fonctions d’ordre supérieur 1 (arguments)",
    "section": "lapply : appliquer une fonction à chaque élément d’une liste ou d’un vecteur",
    "text": "lapply : appliquer une fonction à chaque élément d’une liste ou d’un vecteur\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLa fonction function(x) c(x, x, x) demande à répéter trois fois un élément. Cette fonction est appliquée terme à terme à chaque élement de la liste.\n\nc(\"a\", \"b\") donne c(\"a\", \"b\", \"a\", \"b\", \"a\", \"b\")\nc(\"c\", \"d\", \"e\") donne c(\"c\", \"d\", \"e\", \"c\", \"d\", \"e\", \"c\", \"d\", \"e\")\nc(\"f\", \"g\") donne c(\"f\", \"g\", \"f\", \"g\", \"f\", \"g\")\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLe calcul ci-dessus montre qu’on peut utiliser lapply à l’intérieur d’une autre fonction.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nCe calcul illustre un aspect implicite des deux précédentes syntaxes utilisées : celles-ci utilisent function(x) c(x, x, x) en lieu et place d’un nom de fonction à l’intérieur du lapply ! On appelle cela des fonctions anonymes. Si une fonction n’a pour vocation que d’être utilisée une seule fois, cela peut rendre la syntaxe plus claire et plus élégante qu’une fonction nommée.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDans ce dernier calcul, on remarque que l’on peut appliquer lapply sur un vecteur.\nDans les 4 calculs, on se rend compte que le résultat de lapply est une liste. lapply retourne en effet une liste même dans le cas du quatrième calcul qui lui soumet un vecteur.\n\n\n\n\n\n\nNote\n\n\n\nDans les versions de R récentes, on peut utiliser la notation compacte \\(x) c(x, x, x) à la place de function(x) c(x, x, x) pour désigner une fonction.\nÀ l’intérieur de l’écosystème tidyverse, on peut également utiliser la notation très compacte ~c(.x, .x, .x).",
    "crumbs": [
      "Fonctions d'ordre supérieur 1 (arguments)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_1.html#map-appliquer-une-fonction-multi-paramètres-termes-à-termes",
    "href": "fonctions_ordre_superieur_1.html#map-appliquer-une-fonction-multi-paramètres-termes-à-termes",
    "title": "Fonctions d’ordre supérieur 1 (arguments)",
    "section": "Map : appliquer une fonction multi-paramètres termes à termes",
    "text": "Map : appliquer une fonction multi-paramètres termes à termes\nOn a vu avec lapply comment appliquer une fonction sur chaque termes d’une liste ou d’un vecteur et retourner une liste. Cependant, parfois, un seul argument ne suffit pas, et l’on a envie d’appliquer une fonction terme à terme sur plusieurs listes ou vecteurs. La fonction Map remplit ce besoin.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOn voit ici que la fonction Map permet d’appliquer termet à terme la fonction paste sur deux vecteurs.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nL’argument MoreArgs de Map permet de rajouter une liste d’arguments complémentaires, qui restent fixes entre tous les appels.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOn aurait aussi tout aussi pu utiliser une fonction anonyme pour spécifier des arguments complémentaires. C’est au choix !\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLa fonction Map peut utiliser autant d’arguments que l’on veut, dès lors que la fonction mappée est compatible avec ce nombre d’arguments.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLa fonction Map peut tout-à-fait utiliser des listes. Ici, elle renvoie donc une liste appliquant la fonction + terme à terme :\n\nc(1L, 2L, 3L) + c(10L, 11L, 12L) pour le premier terme.\nc(4L, 5L, 6L, 7L) + c(13L, 14L, 15L, 16L) pour le deuxième terme.\nc(8L, 9L) + c(17L, 18L) pour le troisième terme.",
    "crumbs": [
      "Fonctions d'ordre supérieur 1 (arguments)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_1.html#replicate-une-variante-commode-de-lapply-pour-les-générations-de-nombres-aléatoires",
    "href": "fonctions_ordre_superieur_1.html#replicate-une-variante-commode-de-lapply-pour-les-générations-de-nombres-aléatoires",
    "title": "Fonctions d’ordre supérieur 1 (arguments)",
    "section": "replicate : une variante commode de lapply pour les générations de nombres aléatoires",
    "text": "replicate : une variante commode de lapply pour les générations de nombres aléatoires\nCertaines fonctions utiles en statistiques génèrent des nombres aléatoires. Par exemple, runif(2L) renvoie 2L nombres entre 0 et 1 selon une loi uniforme. Si on veut générer 4 vecteurs de 2 nombres aléatoires, on voudrait faire un lapply sur function() runif(2L).\nLe problème, c’est que cette fonction est sans paramètre. Du coup comment lui spécifier un lapply ?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nL’astuce ci-dessus permet de résoudre le problème ; on a répété 4 fois le 2L. On applique ensuite donc function(n) runif(n) sur c(2L, 2L, 2L, 2L). Chaque élément du vecteur renvoie alors un vecteur de deux nombres aléatoires. Ce n’est cependant pas des plus élégants.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nreplicate est une variante de lapply qui permet d’évaluer une expression plusieurs fois de suite. Cela n’est, bien entendu, utile que dans le cas où cette expression renvoie des résultats différents à chaque évaluation, ce qui est notamment le cas en ce qui concerne la générations de nombres aléatoires.\nOn note l’argument simplify = FALSE à la fin. Si celui-ci n’est pas spécifié, il est par défaut défini à la valeur TRUE, et alors replicate se comporte comme un sapply ; il essaye de construire des matrices.",
    "crumbs": [
      "Fonctions d'ordre supérieur 1 (arguments)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_1.html#apply-appliquer-une-fonction-sur-les-colonnes-ou-les-lignes-dune-matrice",
    "href": "fonctions_ordre_superieur_1.html#apply-appliquer-une-fonction-sur-les-colonnes-ou-les-lignes-dune-matrice",
    "title": "Fonctions d’ordre supérieur 1 (arguments)",
    "section": "apply : appliquer une fonction sur les colonnes ou les lignes d’une matrice",
    "text": "apply : appliquer une fonction sur les colonnes ou les lignes d’une matrice\napply permet d’appliquer une fonction par ligne ou par colonne.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDans le tronçon de code ci-dessus, on a appliqué la fonction max (maximum) respectivement sur chaque ligne et chaque colonne. C’est l’argument MARGIN en deuxième position qui permet de déterminer la direction de cette application de fonction (1 pour les lignes, 2 pour les colonnes).\n\n\n\n\n\n\nNote\n\n\n\nIl est à noter que quelques optimisations de ces fonctions existent. rowSums, colSums, rowMeans, colMeans ont toutes les quatre des noms assez parlants qui permettent d’éviter une écriture un peu trop poussive.",
    "crumbs": [
      "Fonctions d'ordre supérieur 1 (arguments)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_1.html#do.call-appliquer-une-fonction-multi-paramètres-sur-une-liste-darguments",
    "href": "fonctions_ordre_superieur_1.html#do.call-appliquer-une-fonction-multi-paramètres-sur-une-liste-darguments",
    "title": "Fonctions d’ordre supérieur 1 (arguments)",
    "section": "do.call : appliquer une fonction multi-paramètres sur une liste d’arguments",
    "text": "do.call : appliquer une fonction multi-paramètres sur une liste d’arguments\nLa fonction do.call permet d’utiliser une fonction multi-paramètres, par exemple (mais pas obligatoirement) une fonction dépendant de paramètres en dots ..., sur une liste de valeurs.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIci, on a appliqué la fonction paste en même temps sur chaque élément de la liste fournie en argument. On peut noter, également, que les éléments nommés de la liste (ici sep) sont traduits par des arguments nommés.",
    "crumbs": [
      "Fonctions d'ordre supérieur 1 (arguments)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_1.html#reduce-réduire-une-liste-ou-un-vecteur-darguments-par-application-successive-dun-opérateur-binaire",
    "href": "fonctions_ordre_superieur_1.html#reduce-réduire-une-liste-ou-un-vecteur-darguments-par-application-successive-dun-opérateur-binaire",
    "title": "Fonctions d’ordre supérieur 1 (arguments)",
    "section": "Reduce : réduire une liste ou un vecteur d’arguments par application successive d’un opérateur binaire",
    "text": "Reduce : réduire une liste ou un vecteur d’arguments par application successive d’un opérateur binaire\nLa fonction Reduce permet d’appliquer consécutivement une opération binaire.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nCet exemple (que l’on a déjà vu dans le chapitre précédent) correspond à ((1 + 2) + 8) + (-7). Chaque étape utilise l’opération binaire +.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nComme on le voit ci-dessus, on peut éventuellement, à l’aide de accumulate = TRUE, conserver les résultats intermédiaires de la réduction. À savoir ici 1, puis 1 + 2, puis 1 + 2 + 8 et enfin 1 + 2 + 8 - 7.\nMais Reduce peut être employé dans des calculs plus complexes.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDans l’exemple précédent, on a appliqué sur une liste de fonctions l’opérateur Reduce au sens de la composition. C’est un joli exemple pour montrer la richesse d’un langage fonctionnel et illustrer l’idée que Reduce n’est pas restreint à des opérations numériques. En général, cependant, on préfèrera éviter d’empiler des fonctions non-évaluées. On préfèrera donc une notation intermédiaire comme employé ci-dessous.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIci, plutôt que d’empiler des fonctions en mémoire, on les applique successivement. applique_fonction reste une opération binaire, mais est une loi de composition externe, dans la mesure où f est une fonction tandis que accumulateur est un résultat numérique. On remarque aussi qu’on a utilisé l’argument init de Reduce qui permet d’initialiser l’accumulateur. En effet si on veut obtenir atan(pi) / 3 + 1 il faut bien renseigner qu’on commence à pi quelque part. L’argument right = TRUE permet de parcourir la liste de droite à gauche plutôt que de gauche à droite.",
    "crumbs": [
      "Fonctions d'ordre supérieur 1 (arguments)"
    ]
  },
  {
    "objectID": "fonctions_ordre_superieur_1.html#exercices",
    "href": "fonctions_ordre_superieur_1.html#exercices",
    "title": "Fonctions d’ordre supérieur 1 (arguments)",
    "section": "Exercices",
    "text": "Exercices\n\nQuestion 1\nÀ l’aide de la fonction pmax (sans utiliser la fonction max), calculer le maximum de cette liste.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nProposition de solution\n\n\n\n\n\n\nliste &lt;- list(1, -7, 8, 0)\ndo.call(pmax, liste)\n\n[1] 8\n\n\n\n\n\n\n\nQuestion 2\nGénérer une liste avec 10 vecteurs de taille 60, chacun répartis selon une loi normale d’espérance 3 et d’écart-type 0.5. Vous pouvez consulter l’aide de la fonction rnorm via ?rnorm.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nProposition de solution\n\n\n\n\n\n\nreplicate(10, rnorm(n=60,mean = 3,sd = 0.5), simplify = FALSE)\n\n[[1]]\n [1] 2.621041 3.017296 2.595300 3.323185 2.982763 3.414782 4.275790 2.337379\n [9] 2.870028 3.459517 3.552757 3.923646 3.088991 3.655478 3.703509 2.319749\n[17] 3.449414 2.914100 2.904463 3.475863 3.057608 3.013965 2.888011 2.952675\n[25] 2.820864 3.067984 2.233281 3.202531 1.247384 2.649231 2.686335 4.118026\n[33] 2.756398 3.180146 2.765721 2.564687 3.370777 3.096044 3.564808 2.904742\n[41] 2.614398 2.773002 3.601281 2.773165 2.769178 3.134973 2.851989 2.365652\n[49] 3.191427 2.746912 4.068670 3.227494 2.427035 3.157379 3.029501 3.079061\n[57] 2.535020 3.557550 2.172873 3.535171\n\n[[2]]\n [1] 3.742384 1.693267 3.262680 3.687041 3.175082 3.327652 3.322102 2.229089\n [9] 3.507909 3.370670 2.882146 2.631560 2.818640 2.537959 3.059369 2.869765\n[17] 3.293392 3.126215 2.896128 3.020596 2.431365 3.887287 2.788351 2.578570\n[25] 2.989138 3.339642 3.358726 3.210230 2.774031 2.713368 3.033698 3.164209\n[33] 2.926484 3.322519 3.054911 2.601731 2.272416 2.495589 3.538917 2.866134\n[41] 2.620080 2.962195 2.399026 2.784694 2.984031 3.880612 3.235377 3.122783\n[49] 2.960992 3.162190 3.208475 2.579854 3.462117 3.614247 2.987059 3.691249\n[57] 2.716785 3.269513 3.497298 3.570140\n\n[[3]]\n [1] 3.206974 3.470891 2.108354 3.529425 2.979789 3.383838 2.776904 3.178920\n [9] 3.742151 2.891547 2.797469 2.830425 3.688101 3.156951 2.955797 3.216587\n[17] 2.390321 3.540851 3.106817 3.544433 2.705044 3.281669 2.985905 2.370607\n[25] 3.772296 2.441056 2.621179 3.230591 3.254362 2.908391 1.697550 3.212434\n[33] 3.262883 2.046342 2.996041 3.586098 2.407715 2.660827 2.168322 3.325593\n[41] 3.342049 2.850669 1.926216 3.825428 3.119796 3.229602 2.714534 2.005785\n[49] 4.116005 2.707902 3.208651 3.387504 3.603858 3.326362 3.153827 2.536451\n[57] 3.806042 3.031229 2.998758 2.889454\n\n[[4]]\n [1] 3.702369 3.218450 2.418928 2.777185 2.766973 2.407233 3.077934 2.676402\n [9] 2.976905 2.872815 3.557010 2.954312 3.571766 2.376433 3.088996 3.094509\n[17] 3.930701 2.625972 3.558182 2.329172 2.345132 2.953523 2.737757 3.701658\n[25] 2.454796 3.057115 3.705723 3.370076 1.723233 2.870850 3.627430 3.894192\n[33] 3.193419 3.147565 2.542736 2.712422 3.134375 3.259173 4.059462 3.377286\n[41] 2.479037 2.870938 3.342234 2.987130 3.188491 2.475042 3.273614 3.089041\n[49] 3.125660 3.841472 3.538887 3.456507 2.811875 3.704273 2.778346 3.018643\n[57] 3.160875 2.598482 2.321803 2.879331\n\n[[5]]\n [1] 2.547522 3.168715 2.094828 2.578212 3.287712 3.196636 2.484405 3.048137\n [9] 3.082917 2.386885 3.159732 2.714916 2.080892 2.492120 2.509449 2.751931\n[17] 3.762821 2.504401 2.574707 3.392174 3.464732 2.561698 3.130274 3.165037\n[25] 3.280026 3.355576 3.744029 3.747409 2.649169 3.377652 3.571176 3.532385\n[33] 2.805091 3.539183 2.898303 3.228129 3.765202 3.032381 3.401505 4.385100\n[41] 2.822535 2.752347 2.844072 3.276638 3.111699 2.457627 2.376392 3.167596\n[49] 2.925466 2.163664 2.873844 2.305963 2.849049 3.588135 4.013319 3.098211\n[57] 2.754636 2.419659 2.961951 3.911506\n\n[[6]]\n [1] 2.398768 2.431165 4.074656 3.573032 3.174299 3.022919 2.969227 2.845223\n [9] 4.104193 3.355780 3.540697 2.150638 3.865015 2.454156 3.097735 3.242317\n[17] 3.063244 2.952467 3.652241 2.289702 2.677718 2.467306 2.669431 3.004683\n[25] 2.570652 1.926548 3.783443 2.732353 3.263551 3.531735 2.945357 3.503030\n[33] 2.167747 2.807860 2.918918 3.083764 2.037858 2.543815 3.107079 2.053673\n[41] 2.891507 2.506587 3.130327 2.591572 2.500301 2.523748 2.555625 3.282116\n[49] 3.188742 3.014065 3.003881 2.176452 2.986465 3.010246 2.071837 1.757818\n[57] 2.448302 2.883688 3.783292 2.177418\n\n[[7]]\n [1] 2.838317 3.482133 2.610830 2.428426 3.320553 3.686216 2.814034 3.154255\n [9] 3.412774 2.875750 3.581928 3.247240 3.329959 2.924697 3.604722 3.796738\n[17] 3.261688 2.992883 3.026400 3.300181 4.015308 2.924478 2.837360 3.235999\n[25] 2.703810 2.108832 2.939077 3.092697 3.474078 3.043832 2.925345 2.284015\n[33] 2.923535 2.765131 2.615733 2.946484 3.113447 3.404135 2.499260 3.498501\n[41] 3.343190 3.580556 3.465252 3.372727 3.078692 2.957038 2.894743 2.955281\n[49] 3.417593 2.479134 2.730005 2.311805 3.115097 3.135959 3.285463 1.943384\n[57] 3.124746 2.646795 2.275641 3.041322\n\n[[8]]\n [1] 2.888623 4.445942 2.910975 3.082808 3.278277 2.821603 3.097294 2.232757\n [9] 3.593075 3.852154 2.858134 2.531937 3.159928 2.571726 3.063112 3.664326\n[17] 3.490071 2.848911 1.905537 2.402588 2.748389 3.636750 4.663615 2.881209\n[25] 2.292367 2.968250 3.244822 2.580757 2.504386 3.122456 2.557319 3.238519\n[33] 2.220796 2.989458 2.670324 2.755608 2.973838 3.781640 2.848377 2.477029\n[41] 3.401717 2.702442 3.411518 2.954380 2.274728 3.643259 3.644817 2.556178\n[49] 3.135700 3.440607 3.791577 3.699018 3.790982 2.759939 2.776964 3.768073\n[57] 3.648363 3.336747 3.261106 2.712153\n\n[[9]]\n [1] 3.093748 2.534583 2.470881 2.709801 2.950138 2.166935 3.618429 2.947240\n [9] 3.363731 3.178098 3.744086 2.912173 3.108987 3.689949 2.815334 3.461546\n[17] 2.833521 2.779242 2.051723 3.128150 3.034444 2.917622 3.578338 2.562188\n[25] 3.259070 3.517866 3.491860 2.715569 2.872183 2.730977 3.243729 3.810182\n[33] 3.169772 2.604076 3.449494 2.918920 3.524775 2.923505 2.722893 3.483131\n[41] 2.474633 3.608571 2.585740 2.880885 3.013871 3.269174 3.199702 2.451398\n[49] 2.870333 1.815849 2.731097 2.457975 3.068935 3.812488 2.953174 2.616142\n[57] 2.260695 2.448073 3.133841 2.179023\n\n[[10]]\n [1] 3.335670 2.649851 3.551032 3.072143 3.605031 3.186272 3.514046 3.162962\n [9] 2.782050 2.081090 2.254251 2.619378 3.563097 2.885811 4.664275 3.788496\n[17] 2.873298 2.864991 2.950388 3.334164 2.647179 3.111654 2.393456 3.466649\n[25] 2.668940 2.871919 3.233728 2.518906 3.315744 3.162751 2.978970 3.078485\n[33] 3.876391 1.817545 3.454417 3.673988 2.906877 3.328650 2.951871 3.501928\n[41] 2.435719 2.171876 3.214934 3.367174 2.686799 3.072986 3.105788 3.106773\n[49] 3.097381 3.619826 2.239432 3.388737 2.732390 3.227322 3.525228 2.274201\n[57] 3.102311 3.061679 2.566192 2.567770\n\n\n\n\n\n\n\nQuestion 3\nÀ l’aide de la fonction paste0 (qui est comme la fonction paste mais avec l’argument par défaut sep = \"\"), produire la chaine de caractère \"aabbccddeeffgg (...) xxyyzz\". Les lettres en minuscules sont accessibles via letters.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nPropositions de solution\n\n\n\n\n\n\ndo.call(paste0, Map(paste0, letters, letters))\n\n[1] \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"\n\n# ou\n\ndo.call(paste0, as.list(rep(letters, each = 2)))\n\n[1] \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"\n\n# ou plus simplement\n\npaste0(rep(letters, each = 2), collapse = \"\")\n\n[1] \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"\n\n\n\n\n\n\n\nQuestion 4\nObserver cette matrice des permutations en colonnes de 1L:5L :\n\nvecteur &lt;- 1L:5L\nmatrix(\n  c(tail(vecteur, 5L),\n    tail(vecteur, 4L), head(vecteur, 1L),\n    tail(vecteur, 3L), head(vecteur, 2L),\n    tail(vecteur, 2L), head(vecteur, 3L),\n    tail(vecteur, 1L), head(vecteur, 4L)),\n  nrow = length(vecteur),\n  ncol = length(vecteur))\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    2    3    4    5    1\n[3,]    3    4    5    1    2\n[4,]    4    5    1    2    3\n[5,]    5    1    2    3    4\n\n\nPouvez-vous généraliser cette création de matrice à n’importe quel vecteur d’entiers ? Pour ce faire, construisez une fonction super_matrice dont l’unique paramètre est vecteur.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nProposition de solution\n\n\n\n\n\n\nvecteur &lt;- 1L:5L\nsuper_matrice &lt;- function(vecteur) {\n  longueur &lt;- length(vecteur)\n  vapply(0L:(longueur - 1L),\n         \\(n) c(tail(vecteur, longueur - n), head(vecteur, n)),\n         rep(0L,longueur))\n}\nsuper_matrice(vecteur)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    2    3    4    5    1\n[3,]    3    4    5    1    2\n[4,]    4    5    1    2    3\n[5,]    5    1    2    3    4\n\n\n\n\n\n\n\nQuestion 5\nProposer une version du https://fr.wikipedia.org/wiki/Crible_d%27%C3%89ratosth%C3%A8ne faisant apparaître, pour un entier n donné, un vecteur booléen de taille n donnant la primalité (ou non) de l’entier i.\nPar exemple, crible(10) donne c(FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE). En effet 1 n’est pas premier, 2 est premier, 3 est premier…\nOn pourra utiliser la fonction Reduce.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nAide (optionnel mais à ne pas consulter avant 5 minutes de brainstorming !)\n\n\n\n\n\nEssayer, dans un premier temps, d’obtenir une fonction avec i pour argument et un n fixé à l’avance dans l’environnement global, un vecteur :\n\nde taille n\nvalant FALSE sur les multiples de i à l’exception de i lui-même\nvalant TRUE ailleurs\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nProposition de solution\n\n\n\n\n\n\nn &lt;- 10L\nest_multiple &lt;- function(i) 1L:n == i | 1L:n %% i != 0L\nest_multiple(2L)\n\n [1]  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProposition de solution\n\n\n\n\n\n\ncrible &lt;- function(n) {\n  Reduce(`&`,\n       lapply(2L:sqrt(n), \\(i) 1L:n == i | 1L:n %% i != 0L),\n       init = c(FALSE, rep(TRUE, n - 1L)))\n}\ncrible(10L)\n\n [1] FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE",
    "crumbs": [
      "Fonctions d'ordre supérieur 1 (arguments)"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction : les paradigmes de programmation",
    "section": "",
    "text": "Un paradigme de programmation peut être vu comme la philosophie d’un langage. Il prédétermine une manière d’écrire propre à celui-ci, influence ses possibilités, définit une idiomatique conventionnelle (c’est-à-dire, par exemple, une manière d’éviter de copier-coller 500 fois le même paragraphe). Ces paradigmes sont des archétypes ; en réalité, les langages modernes permettent souvent plusieurs paradigmes. Ceux-ci ne correspondent donc pas à une sorte de réglement implacable mais énoncent plutôt différentes manières de structurer du code. Ce qui importe, au fond, c’est d’être suffisamment avisé pour pouvoir faire des choix.\nTrois principaux paradigmes dominent le monde actuel de la programmation. La programmation procédurale, la programmation objet, et la programmation fonctionnelle (cette dernière est le paradigme principal de R).",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#paradigmes-de-programmation",
    "href": "index.html#paradigmes-de-programmation",
    "title": "Introduction : les paradigmes de programmation",
    "section": "",
    "text": "Un paradigme de programmation peut être vu comme la philosophie d’un langage. Il prédétermine une manière d’écrire propre à celui-ci, influence ses possibilités, définit une idiomatique conventionnelle (c’est-à-dire, par exemple, une manière d’éviter de copier-coller 500 fois le même paragraphe). Ces paradigmes sont des archétypes ; en réalité, les langages modernes permettent souvent plusieurs paradigmes. Ceux-ci ne correspondent donc pas à une sorte de réglement implacable mais énoncent plutôt différentes manières de structurer du code. Ce qui importe, au fond, c’est d’être suffisamment avisé pour pouvoir faire des choix.\nTrois principaux paradigmes dominent le monde actuel de la programmation. La programmation procédurale, la programmation objet, et la programmation fonctionnelle (cette dernière est le paradigme principal de R).",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#la-programmation-procédurale",
    "href": "index.html#la-programmation-procédurale",
    "title": "Introduction : les paradigmes de programmation",
    "section": "La programmation procédurale",
    "text": "La programmation procédurale\nLa programmation procédurale est le plus ancien paradigme de programmation. Il s’agit d’une séquence de procédures, c’est-à-dire une série d’étapes à réaliser pour faire quelque chose. On peut voir cela comme une recette de cuisine.\nSupposons que l’on veuille peindre un mur en vert, on pourrait faire :\n\nmettre_sur_palette(palette, bleu)\nmettre_sur_palette(palette, jaune)\nmélanger_couleurs_sur_palette(palette)\npeindre_mur(mur, palette[3])\n\nIl faut bien noter ce qui se passe à la fin de la dernière ligne : on a sélectionné la couleur de la palette en appelant son emplacement numéro 3 avec palette[3]. Cela suppose d’une part que l’on connait le fonctionnement interne des palettes, et d’autre part que cette structure interne ne change jamais. Si l’on change le code interne de la palette, il faudra aussi changer notre code. Notre programme dépend de l’implémentation de la palette.\nToutefois, la programmation purement procédurale n’est pas sans intérêt dans les langages proches du matériel (on les appelle “de bas niveau”). Elle est par exemple utilisée dans le langage C. Le véritable langage des machines est en effet en lui-même procédural ; un processeur est essentiellement un composant électronique qui manipule des états de manière séquentielle. La programmation procédurale pour autant pas restreinte aux langages de bas-niveau ; Python notamment est un peu fourre-tout, mais reste relativement procédural.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#la-programmation-orientée-objet-poo",
    "href": "index.html#la-programmation-orientée-objet-poo",
    "title": "Introduction : les paradigmes de programmation",
    "section": "La programmation orientée objet (POO)",
    "text": "La programmation orientée objet (POO)\nLa programmation orientée objet a émergé du besoin de faire apparaître une syntaxe disciplinée et plus proche d’une perception humaine. Pour ce faire, on s’inspire du monde réel : il n’y a pas besoin de connaitre le fonctionnement électronique d’une télécommande pour appuyer sur ses boutons. Il est pas attendu non plus que l’utilisateur d’une télévision aille bidouiller ses circuits imprimés pour s’en servir. Dans un langage objet, l’exemple précédent pourrait s’écrire :\n\npalette.ajouter(bleu)\npalette.ajouter(jaune)\npalette.mélanger()\nmur.peindre(palette.get_couleur())\n\nOn voit que palette, une instance de palette, possède a minima trois méthodes (ajouter, mélanger, et get_couleur). Puisqu’on s’est astreints à ne jamais accéder aux états internes de la palette, on a découplé le programme de peinture de celui des palettes. On n’a plus besoin de savoir comment est structurée intérieurement une palette (on ne sélectionne plus son 3ème élément). La différence est de taille : la personne qui s’occupe de la maintenance des palettes peut maintenant les changer comme elle veut sans risquer de causer une erreur dans le programme de peinture (par exemple un mur jaune fluo à poids mauves). La seule chose qui doit être respectée, c’est le comportement des différentes méthodes.\n\n\n\n\n\n\nNote\n\n\n\nJava et C++ sont des langages objet populaires.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#la-programmation-fonctionnelle",
    "href": "index.html#la-programmation-fonctionnelle",
    "title": "Introduction : les paradigmes de programmation",
    "section": "La programmation fonctionnelle",
    "text": "La programmation fonctionnelle\nLà où la POO s’inspire des objets dans le monde réel, la programmation fonctionnelle s’inspire du monde des mathématiques. L’idée fondamentale de la programmation fonctionnelle est de ne plus manipuler d’états ; on n’utilise que ce qu’on appelle des “fonctions pures”. Celles-ci se comportent comme une calculatrice sans mémoire. Elles font un calcul purement combinatoire ; elles sont prévues pour retourner toujours le même résultat à partir des mêmes entrées.\n\nmur = mur_peint(couleur = mélanger(jaune, bleu))\n\nLa syntaxe fonctionnelle étant proche d’une écriture mathématique, elle convient aux langages de haut niveau prévus pour le calcul scientifique, comme R. Pendant longtemps (jusqu’aux années 2010), ce paradigme a été considéré comme assez académique et réservé aux profs de facs. Depuis les années 2010, cependant, le paradigme fonctionnel a rencontré un très net regain de popularité et est sorti des universités. Ses principaux intérêts sont :\n\nla grande facilité de déboggage et de test (une entrée doit toujours retourner la même sortie)\nla beauté/maintenabilité du code\nla forte parallélisabilité des calculs : les résultats ne dépendant que de leurs entrées, il est potentiellement possible de calculer plusieurs choses en même temps si l’on dispose de plusieurs CPU. C’est notamment cet aspect qui permet par exemple au package arrow d’être extrêmement rapide ; les calculs sont faits de manière possiblement concourrante plutôt que consécutive.\n\n\n\n\n\n\n\nNote\n\n\n\nOutre R, Haskell, Scala et Lisp sont des langages fonctionnels.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#r-un-langage-fonctionnel-vectoriel-avec-quelques-éléments-de-poo",
    "href": "index.html#r-un-langage-fonctionnel-vectoriel-avec-quelques-éléments-de-poo",
    "title": "Introduction : les paradigmes de programmation",
    "section": "R : un langage fonctionnel, vectoriel, avec quelques éléments de POO",
    "text": "R : un langage fonctionnel, vectoriel, avec quelques éléments de POO\nR est très majoritairement un langage fonctionnel. Dans la mesure où aucun langage n’est entièrement soluble dans un paradigme, il présente également quelques petits traits de programmation objet tordus pour correspondre au coeur d’un langage fonctionnel. Le principal système de programmation objet en R, S3 (qui n’a rien à voir avec le protocole de stockage même s’il s’appelle pareil), adapte les principes de la POO dans le contexte de la programmation fonctionnelle. Grosso modo, dans R, on définit des classes d’objets de manière beaucoup moins formelle que dans la POO (par exemple des tibble, des ggplot…), et on applique des fonctions pures dessus. Contrairement à ce qu’il se passe dans un langage POO, les objets de R sont immutables.\nD’accord, mais qu’est-ce que l’immutabilité ?\nDans presque tous les langages de programmation objet, si on fait :\n\nmur_a = nouveau_mur()\nmur_a.peindre(rouge)\nmur_b = mur_a\nmur_b.peindre(vert)\nmur_a.get_couleur() –&gt; renvoie vert\nmur_b.get_couleur() –&gt; renvoie vert\n\nLa couleur de mur_a a aussi changé ! En fait, dans un langage de POO, on crée des instances avec un constructeur (ici nouveau_mur). mur_a et mur_b correspondent au même mur. Si on modifie l’un, on modifie l’autre.\nA contrario, dans R, on aura plutôt :\n\nmur_a = nouveau_mur()\nmur_a.peindre(rouge)\nmur_b = mur_a\nmur_b.peindre(vert)\nmur_a.get_couleur() –&gt; renvoie rouge\nmur_b.get_couleur() –&gt; renvoie vert\n\nDans R, en fait, tout se passe comme si on ne manipulait que des valeurs, même quand on manipule des objets. On ne crée pas vraiment d’instances de murs.\nUn autre aspect particulier de R est qu’il est vectoriel. Si je fais :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLa vectorisation est tout-à-fait implicite. Dans un langage procédural non-vectorisé, j’aurais plutôt écrit :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nCette dernière écriture est équivalente mais n’est pas très pratique pour écrire des statistiques….\n\n\n\n\n\n\nNote\n\n\n\nL’opérateur pipe %&gt;% repose sur les axiomes de la programmation fonctionnelle. Il suppose en effet que chaque sortie de fonction ne dépend que des entrées. Il permet de profiter à la fois de la simplicité d’une écriture de type “recette de cuisine” et des avantages de la programmation fonctionnelle.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#quizz",
    "href": "index.html#quizz",
    "title": "Introduction : les paradigmes de programmation",
    "section": "Quizz",
    "text": "Quizz\n\nQuestion 1\n\nDans un langage fonctionnel idéal :\n\n\n\n\n ✗On n’utilise que des procédures (des fonctions sans valeur de retour).\n\n\n ✓On n’utilise que des fonctions dites pures, c’est-à-dire des fonctions purement combinatoires.\n\n\n ✗On n’utilise que des fonctions, pures, ou non.\n\n\n ✗Différentes étapes successives qu’on appelle fonctions. On les applique sur des objets qu’elles modifient progressivement.\n\n\nEffacer la réponse\n\n\n\n\n\n\n\n\n\n\nQuestion 2\n\nQuel est le rapport entretenu entre R et la Programmation Orientée Objet ?\n\n\n\n\n ✗R est un archétype de langage de POO.\n\n\n ✗On ne peut pas du tout faire de POO en R.\n\n\n ✗Objection votre honneur !\n\n\n ✓R est surtout un langage fonctionnel, mais il présente quelques aspects de POO.\n\n\nEffacer la réponse\n\n\n\n\n\n\n\n\n\n\nQuestion 3\n\nUn langage de bas niveau est un langage caractérisé par sa simplicité.\n\n\n\n\n ✓Non, c’est un langage proche du langage machine, donc souvent assez complexe et verbieux.\n\n\n ✗Exactement ! C’est un langage prévu pour être facile d’appréhension, d’où de “bas niveau”.\n\n\n ✗Non, un langage de bas-niveau est un langage est un langage qui est calculé dans la partie basse des microprocesseurs, tandis que les langages de haut niveau sont déterminés par la partie haute.\n\n\n ✗Non, un langage de bas-niveau est un langage stromosogomique de capacitance inférimitésimale.\n\n\nEffacer la réponse\n\n\n\n\n\n\n\n\n\n\nQuestion 4\n\nAnalysons ce pseudo-code :\n\nclasseur_ods = nouveau_classeur_ods()\nonglet = nouvel_onglet(donnee = “En voilà de la donnée”)\nclasseur_ods.ajouter_onglet(onglet)\nclasseur_ods.enregistrer(“/home/tintin/mon_classeur.ods”)\n\nÀ quel paradigme de programmation cela ressemble ?\n\n\n\n\n ✗Langage procédural\n\n\n ✓Langage objet\n\n\n ✗Langage fonctionnel\n\n\nEffacer la réponse\n\n\n\n\n\n\n\n\n\n\nQuestion 5\n\nAnalysons ce pseudo-code :\n\na = [‘b’, ‘o’, ‘n’, ‘j’, ‘o’, ‘u’, ‘r’, ’ ’]\ni = 1\nwhile a[i] != ’ ’ {\n  print(a[i])\n  print(a[i])\n}\n\nÀ quel paradigme de programmation cela ressemble ?\n\n\n\n\n ✓Langage procédural\n\n\n ✗Langage objet\n\n\n ✗Langage fonctionnel\n\n\nEffacer la réponse\n\n\n\n\n\n\n\n\n\n\nQuestion 6\n\nAnalysons ce pseudo-code :\n\nracine_carrée(multiplier_par(entiers de 1 à 10, 3))\n\nÀ quel paradigme de programmation cela ressemble ?\n\n\n\n\n ✗Langage procédural\n\n\n ✗Langage objet\n\n\n ✓Un langage fonctionnel ! Et vectoriel en plus ! C’est presque R !\n\n\nEffacer la réponse\n\n\n\n\n\n\n\n\n\n\nQuestion 7\n\nOn a vu qu’un langage objet permet notamment d’éviter les dépendances à l’implémentation.\nOn préfère écrire :\n\nmur.peindre(palette.get_couleur())\n\nQue :\n\npeindre_mur(mur, palette[3])\n\nQuel intérêt cela présente ?\n\n\n\n\n ✗Aucun, c’est purement esthétique.\n\n\n ✓Cela permet à un collègue d’être libre de modifier le fonctionnement interne de la palette sans faire bugger le programme de peinture.\n\n\n ✗Compter jusqu’à 3 est difficile car un ordinateur repose sur des nombres binaires. On préfère donc enlever le 3.\n\n\n ✗On a vraiment envie que le programme de peinture dépende du programme de la palette. Il faut que les gens travaillent en équipe et donc qu’ils soient chacun au courant de tout ce qu’il se passe dans l’intégralité du projet.\n\n\nEffacer la réponse\n\n\n\n\n\n\n\n\n\n\nQuestion 8\n\nCombien de méthodes différentes de la classe discman ce pseudo-code utilise-t-il ?\n\ndiscman.brancher_ecouteurs(ecouteurs)\ndiscman.inserer_cd(never_mind_the_bollocks_here_s_the_sex_pistols)\ndiscman.ecouter_cd()\ndiscman.retirer_cd()\ndiscman.inserer_cd(peace_sells_but_who_s_buying)\ndiscman.ecouter_cd()\ndiscman.retirer_cd()\n\n\n\n\n\n ✗1\n\n\n ✗2\n\n\n ✗3\n\n\n ✓4\n\n\n ✗5\n\n\n ✗6\n\n\n ✗7\n\n\nEffacer la réponse",
    "crumbs": [
      "Introduction"
    ]
  }
]